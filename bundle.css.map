{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "Input.svelte",
    "Output.svelte",
    "Tabs.svelte"
  ],
  "sourcesContent": [
    "<script lang=\"ts\">;\nimport { codeStore, tabsStore } from \"./stores\";\nimport Input from \"./Input.svelte\";\nimport Output from \"./Output.svelte\";\nimport Tabs from \"./Tabs.svelte\";\nlet current = 0;\nlet compiled;\nconst worker = new Worker(\"./worker.js\");\nworker.addEventListener(\"message\", (event) => {\n    compiled = event.data;\n});\nfunction compile(_components) {\n    worker.postMessage(_components);\n}\nfunction deleteComponent(deleteId) {\n    current = 0; // reset back to App.svelte\n    $codeStore = $codeStore.filter(({ id }) => id !== deleteId);\n}\nfunction getMax(_components) {\n    const ids = _components.map(({ id }) => id);\n    return Math.max(...ids);\n}\nfunction newComponent() {\n    const id = getMax($codeStore) + 1;\n    $codeStore = $codeStore.concat({\n        id,\n        name: `Component${id}`,\n        type: \"svelte\",\n        source: \"\",\n    });\n    current = id;\n}\n$: compile($codeStore);\n</script>\n\n<style>\n    main {\n        display: grid;\n        grid-template-areas:\n            \"tabs tabs\"\n            \"input output\";\n        grid-template-columns: 1fr 1fr;\n        grid-template-rows: 50px 1fr;\n        gap: 5px;\n    }\n\n    .tabs {\n        grid-area: tabs;\n        justify-self: start;\n        align-self: start;\n        overflow-x: scroll;\n        width: 100%;\n        height: 100%;\n    }\n\n    .input {\n        grid-area: input;\n    }\n\n    .output {\n        grid-area: output;\n    }\n</style>\n\n<main>\n    <div class=\"tabs\">\n        <Tabs\n            tabs={$tabsStore}\n            {current}\n            on:select={({ detail }) => (current = detail)}\n            on:new={newComponent}\n            on:del={({ detail }) => deleteComponent(detail)} />\n    </div>\n    <div class=\"input\">\n        <Input bind:components={$codeStore} bind:current />\n    </div>\n    <div class=\"output\">\n        <Output {compiled} />\n    </div>\n</main>\n",
    "<script lang=\"ts\">;\nexport let components = [];\nexport let current = 0;\nlet textarea;\n$: currentComponentId = components.findIndex(({ id }) => id === current);\n$: if (currentComponentId > -1 && textarea)\n    textarea.focus();\nfunction keydownHandler(event) {\n    if (event.key == \"Tab\") {\n        event.preventDefault();\n        var start = textarea.selectionStart;\n        var end = textarea.selectionEnd;\n        // set textarea value to: text before caret + tab + text after caret\n        const spaceTab = `    `;\n        textarea.value = `${textarea.value.substring(0, start)}${spaceTab}${textarea.value.substring(end)}`;\n        // put caret at right position again\n        textarea.selectionStart = textarea.selectionEnd =\n            start + spaceTab.length;\n    }\n}\n</script>\n\n<section>\n    <textarea\n        on:keydown={keydownHandler}\n        bind:value={components[currentComponentId].source}\n        bind:this={textarea} />\n</section>\n\n<style>\n    section {\n        width: 100%;\n    }\n</style>",
    "<script lang=\"ts\">export let compiled;\nlet iframe;\nfunction update(code) {\n    iframe.contentWindow.postMessage(code, \"*\");\n}\n$: iframe && compiled && update(compiled);\nconst srcdoc = `\n<!DOCTYPE html>\n<head>\n    <script type=\"module\">\n\n        let c;\n\n        function update(source) {\n            const blob = new Blob([source], { type: \"text/javascript\" });\n            const url = URL.createObjectURL(blob);\n\n            import(url).then(({ default: App }) => {\n                if (c) {\n                    c.$destroy();\n                }\n\n                document.body.innerHTML = \"\";\n                c = new App({\n                    target: document.body\n                });\n            })\n        }\n        window.addEventListener(\"message\", (event) => {\n            update(event.data);\n        }, false);\n    <\\/script>\n<\\/head>\n<body><\\/body>\n<\\/html>`;\n</script>\n\n<section><iframe title=\"Rendered REPL\" bind:this={iframe} {srcdoc} /></section>\n\n<style>\n    section {\n        border: solid 1px black;\n        width: 100%\n    }\n</style>",
    "<script lang=\"ts\">import { createEventDispatcher } from \"svelte\";\n;\nconst dispatch = createEventDispatcher();\nexport let tabs = [];\nexport let current = 0;\n</script>\n\n<style>\n    ul {\n        margin-bottom: 0;\n    }\n\n    li {\n        cursor: pointer;\n    }\n\n    button {\n        text-decoration: initial;\n        margin-left: 5px;\n    }\n\n    .active {\n        font-weight: 900;\n        text-decoration: underline;\n    }\n</style>\n\n<ul>\n    {#each tabs as { name, type, id }, index}\n        <li\n            class:active={id === current}\n            on:click={() => dispatch('select', id)}>\n            {name}.{type}\n            {#if index !== 0}\n                <button on:click={() => dispatch('del', id)}>x</button>\n            {/if}\n        </li>\n    {/each}\n    <li><button on:click={() => dispatch('new')}>+</button></li>\n</ul>\n"
  ],
  "names": [],
  "mappings": "AAoCI,IAAI,eAAC,CAAC,AACF,OAAO,CAAE,IAAI,CACb,mBAAmB,CACf,WAAW;YACX,cAAc,CAClB,qBAAqB,CAAE,GAAG,CAAC,GAAG,CAC9B,kBAAkB,CAAE,IAAI,CAAC,GAAG,CAC5B,GAAG,CAAE,GAAG,AACZ,CAAC,AAED,KAAK,eAAC,CAAC,AACH,SAAS,CAAE,IAAI,CACf,YAAY,CAAE,KAAK,CACnB,UAAU,CAAE,KAAK,CACjB,UAAU,CAAE,MAAM,CAClB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AAChB,CAAC,AAED,MAAM,eAAC,CAAC,AACJ,SAAS,CAAE,KAAK,AACpB,CAAC,AAED,OAAO,eAAC,CAAC,AACL,SAAS,CAAE,MAAM,AACrB,CAAC;AC/BD,OAAO,cAAC,CAAC,AACL,KAAK,CAAE,IAAI,AACf,CAAC;ACQD,OAAO,eAAC,CAAC,AACL,MAAM,CAAE,KAAK,CAAC,GAAG,CAAC,KAAK,CACvB,KAAK,CAAE,IAAI;IACf,CAAC;ACnCD,EAAE,cAAC,CAAC,AACA,aAAa,CAAE,CAAC,AACpB,CAAC,AAED,EAAE,cAAC,CAAC,AACA,MAAM,CAAE,OAAO,AACnB,CAAC,AAED,MAAM,cAAC,CAAC,AACJ,eAAe,CAAE,OAAO,CACxB,WAAW,CAAE,GAAG,AACpB,CAAC,AAED,OAAO,cAAC,CAAC,AACL,WAAW,CAAE,GAAG,CAChB,eAAe,CAAE,SAAS,AAC9B,CAAC"
}